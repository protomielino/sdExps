INCLUDE(../../cmake/macros.cmake)

PROJECT(speed-dreams-2)

SET(_TARGET_NAME speed-dreams-2)

SET(_SOURCES main.cpp)
IF(WIN32)
    SET(_SOURCES ${_SOURCES} main.rc resource.h ../../data/data/icons/icon.ico)
ENDIF(WIN32)

ADD_INTERFACE_INCLUDEDIR()
ADD_SDLIB_INCLUDEDIR(tgf tgfclient tgfdata raceengine math portability)
ADD_SDL_INCLUDEDIR()
ADD_PLIB_INCLUDEDIR()

# Disable developer warning
IF(COMMAND CMAKE_POLICY)
    CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND CMAKE_POLICY)

ADD_EXECUTABLE(${_TARGET_NAME} ${_SOURCES})

ADD_SDLIB_LIBRARY(${_TARGET_NAME} tgf tgfclient tgfdata raceengine)

IF(UNIX)
    SD_INSTALL_FILES(MAN man6 PREFIX ${SOURCE_DIR}/doc/man FILES ${_TARGET_NAME}.6)
ENDIF(UNIX)

SD_INSTALL_FILES(BIN TARGETS ${_TARGET_NAME})

# Under Windows, install needed 3rd party DLLs close to Speed Dreams executable
# (but stay compatible with the old 2.0.0 3rd party package which had less DLLs inside)
IF(WIN32)

    SET(_THIRDPARTY_DLL_PATHNAMES)

    FIND_PACKAGE(OpenAL)

    GET_FILENAME_COMPONENT(_LIB_PATH ${OPENAL_LIBRARY} PATH)
    GET_FILENAME_COMPONENT(_LIB_NAME ${OPENAL_LIBRARY} NAME_WE)
	SET(_DLL_PATHNAME ${_LIB_PATH}/../bin/${CMAKE_SHARED_LIBRARY_PREFIX}${_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
	IF(EXISTS ${_DLL_PATHNAME})
		LIST(APPEND _THIRDPARTY_DLL_PATHNAMES ${_DLL_PATHNAME})
	ENDIF(EXISTS ${_DLL_PATHNAME})

    FIND_PACKAGE(SDL)

    GET_FILENAME_COMPONENT(_LIB_PATH ${SDL_LIBRARY} PATH)
    GET_FILENAME_COMPONENT(_LIB_NAME ${SDL_LIBRARY} NAME_WE)
    SET(_DLL_PATHNAME ${_LIB_PATH}/../bin/${CMAKE_SHARED_LIBRARY_PREFIX}${_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
	IF(EXISTS ${_DLL_PATHNAME})
		LIST(APPEND _THIRDPARTY_DLL_PATHNAMES ${_DLL_PATHNAME})
	ENDIF(EXISTS ${_DLL_PATHNAME})

	IF(OPTION_3RDPARTY_EXPAT)

        FIND_PACKAGE(EXPAT)

        GET_FILENAME_COMPONENT(_LIB_PATH ${EXPAT_LIBRARY} PATH)
        GET_FILENAME_COMPONENT(_LIB_NAME ${EXPAT_LIBRARY} NAME_WE)
        SET(_DLL_PATHNAME ${_LIB_PATH}/../bin/${CMAKE_SHARED_LIBRARY_PREFIX}${_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
		IF(EXISTS ${_DLL_PATHNAME})
			LIST(APPEND _THIRDPARTY_DLL_PATHNAMES ${_DLL_PATHNAME})
		ENDIF(EXISTS ${_DLL_PATHNAME})

	ENDIF(OPTION_3RDPARTY_EXPAT)

	IF(OPTION_3RDPARTY_SOLID)

        FIND_PACKAGE(SOLID)

        GET_FILENAME_COMPONENT(_LIB_PATH ${SOLID_SOLID_LIBRARY} PATH)
        GET_FILENAME_COMPONENT(_LIB_NAME ${SOLID_SOLID_LIBRARY} NAME_WE)
        SET(_DLL_PATHNAME ${_LIB_PATH}/../bin/${CMAKE_SHARED_LIBRARY_PREFIX}${_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
		IF(EXISTS ${_DLL_PATHNAME})
			LIST(APPEND _THIRDPARTY_DLL_PATHNAMES ${_DLL_PATHNAME})
		ENDIF(EXISTS ${_DLL_PATHNAME})

        GET_FILENAME_COMPONENT(_LIB_PATH ${SOLID_BROAD_LIBRARY} PATH)
        GET_FILENAME_COMPONENT(_LIB_NAME ${SOLID_BROAD_LIBRARY} NAME_WE)
        SET(_DLL_PATHNAME ${_LIB_PATH}/../bin/${CMAKE_SHARED_LIBRARY_PREFIX}${_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
		IF(EXISTS ${_DLL_PATHNAME})
			LIST(APPEND _THIRDPARTY_DLL_PATHNAMES ${_DLL_PATHNAME})
		ENDIF(EXISTS ${_DLL_PATHNAME})

	ENDIF(OPTION_3RDPARTY_SOLID)

    SD_INSTALL_FILES(BIN FILES ${_THIRDPARTY_DLL_PATHNAMES})

ENDIF(WIN32)
